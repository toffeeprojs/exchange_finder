volumes:
  postgres_data: {}
  clickhouse_data: {}
  rabbitmq_data: {}
  redis_data: {}

networks:
  app_net:
    driver: bridge

services:
  postgres:
    image: postgis/postgis:17-3.5-alpine
    restart: always
    shm_size: 128mb
    volumes:
      - ./postgres/project_settings.sql:/docker-entrypoint-initdb.d/project_settings.sql:ro
      - postgres_data:/var/lib/postgresql/data
    networks: [ app_net ]
    environment:
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_DB: ${DBNAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${DBNAME}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  clickhouse:
    image: clickhouse/clickhouse-server:25.6.1.3206-alpine
    restart: always
    volumes:
      - ./clickhouse/project_settings.sql:/docker-entrypoint-initdb.d/project_settings.sql:ro
      - clickhouse_data:/var/lib/clickhouse/
    networks: [ app_net ]
    environment:
      CLICKHOUSE_USER: ${USER}
      CLICKHOUSE_PASSWORD: ${PASSWORD}
      CLICKHOUSE_DB: ${DBNAME}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  rabbitmq:
    image: rabbitmq:4.1.1-alpine
    restart: always
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - rabbitmq_data:/var/lib/rabbitmq/
    networks: [ app_net ]
    environment:
      RABBITMQ_DEFAULT_USER: ${USER}
      RABBITMQ_DEFAULT_PASS: ${PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  redis:
    image: redis:8.0.2-alpine3.21
    restart: always
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks: [ app_net ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  fastapi:
    build: ./fastapi
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks: [ app_net ]

  nginx:
    image: nginx:1.28.0-alpine3.21-slim
    restart: always
    depends_on:
      fastapi:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/sslcert.sh:/docker-entrypoint.d/99-sslcert.sh
    networks: [ app_net ]
    ports:
      - "8080:80"
